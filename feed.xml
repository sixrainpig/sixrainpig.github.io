<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>刘玉柱区块链博客</title>
    <description>刘玉柱，莫斯科国立大学社会学学士，国内首家区块链技术与底层开发全日制培训学院《孔壹学院》首期学员。</description>
    <link>http://rainpig.com/</link>
    <atom:link href="http://rainpig.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 28 Jan 2018 13:50:42 +0800</pubDate>
    <lastBuildDate>Sun, 28 Jan 2018 13:50:42 +0800</lastBuildDate>
    <generator>Jekyll v3.5.1</generator>
    
      <item>
        <title>并发and串行编程中的进程与线程大白话解释</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;今天上午的时候，我学了并发编程中的进程和线程，总的来说感觉这一块其实还是蛮容易理解的。接下来我就谈谈我今天学完对并发编程中的进程和线程的理解。&lt;/p&gt;

  &lt;p&gt;首先，我一直很喜欢把现实生活中的某些事情与编程世界里的内容进行比喻。今天说到进程，进程是一个正在运行的程序，并且一个进程中可以包括很多线程，线程就是一条有序的CPU的集合体，多个线程就是多条有序的CPU的集合体。在这儿，其实我会首先联想到我们以前中学做的数学卷子，进程可能是一张考试卷子，线程就好比数学卷子里的题目种类，比如填空题，选择题，还有大题目这类的一种集合体，因为填空题里面有用填空的方式去做题的集合体，同样其他题型也是这样，而一张卷子里包含了多个题型，所以多线程也就能顺着明白了。&lt;/p&gt;

  &lt;p&gt;在我看来，其实人脑和CPU差不多，因为在编程里，我们假设一台电脑只有一个CPU，在这同一时刻里，我们有多条线程，但我们的CPU只能执行一条命令，正好也对上了我们人在写数学题的时候，也只能在同一时间里只能做一道题。电脑在这种情况下，就需要通过上下文切换来实现时间片的分配问题，而我们人脑在做数学卷子的时候，我也通常会选择一些比较好做的题目先写了，然后再回过去做一些难的题目，也有点上下文切换的那种感觉，但是差别就在于人脑是灵活的，电脑是死板的。而且在并发编程中，在多个线程的时间片分配的问题中，多个线程之间会不断的来回切换，其实人脑做数学卷子的时候也有这样的情况，。而串行编程就是会根据添加线程的顺序，按照顺序一一的去执行。&lt;/p&gt;

  &lt;p&gt;多线程编程的优点就是分线程可以处理耗时操作，不会出现主线程堵塞。这个就和有些人做题目差不多了，有些人会合理的把握时间去做题，简单的先做了，难的那我就留到最后。多线程的缺点就是会产生资源竞争，内存消耗，必要的时候会产生死锁。其实也就反应了在做题的时候，如果你有之前的题目没写，你在做后面的题目的时候总是会想着那条没做的那题，其实有点脑力消耗的意思。&lt;/p&gt;

  &lt;p&gt;今天还讲了一个物理CPU可以虚拟出多个逻辑CPU，比如8核的电脑，其实只有一个物理CPU，和7个逻辑CPU，同时可以执行8个CPU命令。这跟某些人一样，在同一时间可以一心好几用。可能我的形容可能不大对，但是我觉得在地球上，不管什么生物，他肯定是有共同点的，更何况电脑是人造出来的呢。&lt;/p&gt;

&lt;/blockquote&gt;

</description>
        <pubDate>Thu, 25 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://rainpig.com/2018/01/25/blockchain-security/</link>
        <guid isPermaLink="true">http://rainpig.com/2018/01/25/blockchain-security/</guid>
        
        <category>golang，并发编程，进程，线程</category>
        
        
      </item>
    
  </channel>
</rss>
